{"version":3,"sources":["Components/WelcomeScreen.jsx","Components/PlayerBoard.jsx","Components/ComputerBoard.jsx","Components/ShipFactory.js","Components/GameBoard.js","Components/Winner.jsx","Components/RandomizeShip.jsx","App.js","index.js"],"names":["WelcomeScreen","props","className","onClick","playGame","PlayerBoard","playerBoard","map","col","index","row","pos","data-col","data-row","attack","uniqid","ComputerBoard","computerBoard","shipFactory","length","hitPoints","Array","fill","hit","this","indexOf","isSunk","every","val","gameBoard","cols","rows","board","ships","placeShip","horizontal","rndNum","Math","floor","random","forEach","ship","shipPlaced","console","log","freeSpaces","i","receiveAttack","splice","WinnerScreen","player","newGame","RandomizeShip","randomizeShip","App","useState","welcome","setWelcome","setPlayerBoard","setComputerBoard","updateDom","setUpdateDom","setPlayer","winner","setWinner","gameOn","setGameOn","intialLoad","setInitialLoad","action","setAction","computerAttack","setTimeout","useEffect","Winner","e","target","getAttribute","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94aa370c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"materialize-css/dist/css/materialize.min.css\"\n\nconst WelcomeScreen = props => {\n\n    return (\n        <div className=\"center-align welcome\">\n            <h1 >Welcome</h1>\n            <p>The goal of the game is to destroy all</p>\n            <p>of the enemy ships before he destroy yours!</p>\n            <p>if your attack hit, you can attack again.</p>\n            <p>if you miss, its your oponent turn!</p>\n            <p>Good Luck, Have Fun!</p>\n            <button onClick={props.playGame} className=\"waves-effect waves-light btn\">Play!</button>\n        </div>\n\n    )\n}\n\nexport default WelcomeScreen;","import React from \"react\";\nimport uniqid from \"uniqid\";\n\n\nconst PlayerBoard = (props) => {\n  return (\n    <div className=\"parent center-align\">\n      <h3 className=\"current-player\">Player</h3>\n      <div className=\"grid-container\">\n        {props.playerBoard.map((col, index) => {\n          return (\n            <div key={uniqid()} className=\"center-align\">\n              {col.map((row, pos) => {\n                if (props.playerBoard[index][pos] === \"sea\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      onClick={props.attack}\n                      className=\"squares \"\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (typeof props.playerBoard[index][pos] === \"object\") {\n                  return (\n                    <div key={uniqid()}                      data-col={index}\n                      data-row={pos}\n                      className=\"ship center-align\"\n                      onClick={props.attack}\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (props.playerBoard[index][pos] === \"hit\") {\n                  return (\n                    <div key={uniqid()}                      data-col={index}\n                      data-row={pos}\n                      className=\"hit center-align\"\n                    >\n                      \n                    </div>\n                  );\n                } else {\n                  return (\n                    <div key={uniqid()}                      data-col={index}\n                      data-row={pos}\n                      className=\"attacked center-align\"\n                    >\n                      \n                    </div>\n                  );\n                }\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerBoard;\n","import React from \"react\";\nimport uniqid from \"uniqid\";\n\n\nconst ComputerBoard = (props) => {\n  return (\n    <div className=\"parent center-align\">\n      <h3 className=\"current-player\">Computer</h3>\n      <div className=\"grid-container\">\n        {props.computerBoard.map((col, index) => {\n          return (\n            <div key={uniqid()} className=\"center-align\">\n              {col.map((row, pos) => {\n                if (props.computerBoard[index][pos] === \"sea\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      onClick={props.attack}\n                      className=\"squares \"\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (typeof props.computerBoard[index][pos] === \"object\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      className=\"squares center-align\"\n                      onClick={props.attack}\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (props.computerBoard[index][pos] === \"hit\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      className=\"hit center-align\"\n                    >\n                      \n                    </div>\n                  );\n                } if(props.computerBoard[index][pos] === \"attacked\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      className=\"attacked center-align\"\n                    >\n                      \n                    </div>\n                  );\n                }\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ComputerBoard;\n","const shipFactory = (length) => {\n  return {\n    hitPoints: new Array(length).fill(\"o\"),\n    hit() {\n      let index = this.hitPoints.indexOf(\"o\");\n     return this.hitPoints[index] = \"x\";\n    },\n    isSunk() {\n      if (this.hitPoints.every((val) => val === \"x\")) {\n        return true;\n      } else return false;\n    },\n  };\n};\n\n\nexport default shipFactory;","import shipFactory from \"./ShipFactory\";\n\nconst gameBoard = (cols, rows) => {\n  return {\n    board: new Array(rows).fill().map(() => new Array(cols).fill(\"sea\")),\n    ships: [\n      shipFactory(2),\n      shipFactory(3),\n      shipFactory(4),\n      shipFactory(5),\n    ],\n    //----------------------------PLACESHIP\n    placeShip() {\n      //variables\n      let col, row;\n      let horizontal = true;\n      let rndNum = Math.floor(Math.random() * 10);\n\n      this.ships.forEach((ship, index) => {\n        let shipPlaced = false;\n\n        console.log(ship.hitPoints);\n        if (rndNum > 5) {\n          horizontal = false;\n        }\n        while (!shipPlaced) {\n          //--------------------------- HORIZONTAL--//\n          if (horizontal) {\n            //check for roll to not place the ship out of boundaries\n            col = Math.floor(\n              Math.random() * (this.board.length - ship.hitPoints.length)\n            );\n            row = Math.floor(Math.random() * this.board.length);\n            //check if space rolled is empty\n            if (this.board[col][row] === \"sea\") {\n              //create a freeSpaces var to check if there is enough spaces for the length\n              //of the ship\n              let freeSpaces = 1;\n              for (let i = 1; i < ship.hitPoints.length; i++) {\n                if (this.board[col + i][row] === \"sea\") {\n                  freeSpaces++;\n                } \n              }\n              if (freeSpaces === ship.hitPoints.length) {\n                for (let i = 0; i < ship.hitPoints.length; i++) {\n                  this.board[col + i][row] = ship;\n                }\n                return (shipPlaced = true);\n              }\n            } //-----------------------------VERTICAL--//\n          }\n          if (!horizontal) {\n            col = Math.floor(Math.random() * this.board.length);\n            row = Math.floor(\n              Math.random() * (this.board.length - ship.hitPoints.length)\n            );\n            if (this.board[col][row] === \"sea\") {\n              let freeSpaces = 1;\n              for (let i = 1; i < ship.hitPoints.length; i++) {\n                if (this.board[col][row + i] === \"sea\") {\n                  freeSpaces++;\n                } \n              }\n              if (freeSpaces === ship.hitPoints.length) {\n                for (let i = 0; i < ship.hitPoints.length; i++) {\n                  this.board[col][row + i] = ship;\n                }\n                return (shipPlaced = true);\n              }\n            }\n          } \n        }\n        return shipPlaced;\n      });\n    },\n    receiveAttack(col, row) {\n      if (this.board[col][row] === \"sea\") {\n        this.board[col][row] = \"attacked\";\n        //next player\n        //remove eventListener\n      }\n      //TODO HERE\n      if (typeof this.board[col][row] === \"object\") {\n        let ship = this.board[col][row];\n        let index = this.ships.indexOf(ship);\n        this.board[col][row] = \"hit\";\n        this.ships[index].hit();\n        if (this.ships[index].isSunk()) {\n          //check for all ships destroyed\n          this.ships.splice(index, 1);\n        }\n        if (this.ships.length === 0) {\n          return \"winner\";\n        }\n      }\n      return this.board[col][row];\n    },\n  };\n};\n\nexport default gameBoard;\n","import React from \"react\";\n\n\nconst WinnerScreen = props => {\n    return (\n        <div className=\"center-align win-container\">\n            <h1 className=\"center-align\">{props.player ? \"Player Wins!\" : \"Computer Wins!\"} </h1>\n            <p>Thanks for playing!</p>\n            <button className=\"waves-effect waves-ligth btn\" onClick={props.newGame}>Play Again ?</button>\n        </div>\n    )\n}\n\nexport default WinnerScreen;","import React from \"react\";\n\nconst RandomizeShip = props => {\n\n\n    return (\n        <button className=\"random btn waves-effect waves-red\" onClick={props.randomizeShip}>Randomize</button>\n    )\n}\n\nexport default RandomizeShip;","import WelcomeScreen from \"./Components/WelcomeScreen\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport PlayerBoard from \"./Components/PlayerBoard\";\nimport ComputerBoard from \"./Components/ComputerBoard\";\nimport gameBoard from \"./Components/GameBoard\";\nimport \"./style/style.css\";\nimport WinnerScreen from \"./Components/Winner\";\nimport RandomizeShip from \"./Components/RandomizeShip\";\nimport { act } from \"react-dom/test-utils\";\n\nfunction App() {\n  const [welcome, setWelcome] = useState(true);\n  const [playerBoard, setPlayerBoard] = useState(gameBoard(9, 9));\n  const [computerBoard, setComputerBoard] = useState(gameBoard(9, 9));\n  const [updateDom, setUpdateDom] = useState(false);\n  const [player, setPlayer] = useState(true);\n  const [winner, setWinner] = useState(false);\n  const [gameOn, setGameOn] = useState(false);\n  const [intialLoad, setInitialLoad] = useState(true);\n  const [action, setAction ] = useState(\"\");\n\n  //FIGURE HOW TO DISABLE CLICK ON DIV AFTER IT HAVE BEEN CLICKED;\n\n  const playGame = () => {\n    setWelcome(false);\n    playerBoard.placeShip();\n    computerBoard.placeShip();\n    setInitialLoad(false);\n  };\n\n  const attack = (e) => {\n    if (player) {\n      setGameOn(true);\n      let col = e.target.getAttribute(\"data-col\");\n      let row = e.target.getAttribute(\"data-row\");\n      computerBoard.receiveAttack(col, row);\n      if (computerBoard.receiveAttack(col, row) === \"hit\") {\n        //keeps playing\n        setAction(\"Player Hit!\")\n        setUpdateDom(true);\n        if (computerBoard.ships.length === 0) {\n          setWinner(true);\n        }\n      } else {\n        setAction(\"Player Miss!\")\n        setPlayer(false);\n      }\n    }\n  };\n  const computerAttack = () => {\n    if (!player) {\n      let col = Math.floor(Math.random() * playerBoard.board.length);\n      let row = Math.floor(Math.random() * playerBoard.board.length);\n\n      while (\n        (playerBoard.board[col][row] === \"attacked\" ||\n          playerBoard.board[col][row] === \"hit\") &&\n        !winner\n      ) {\n        col = Math.floor(Math.random() * playerBoard.board.length);\n        row = Math.floor(Math.random() * playerBoard.board.length);\n      }\n      playerBoard.receiveAttack(col, row);\n      setTimeout(() => {\n        if (playerBoard.receiveAttack(col, row) === \"attacked\") {\n          setPlayer(true);\n          setAction(\"Computer Miss!\")\n        } else {\n          setAction(\"Computer Hits!\")\n\n          setUpdateDom(true);\n\n          if (playerBoard.ships.length === 0) {\n            setWinner(true);\n            return;\n          }\n          setTimeout(() => {\n            computerAttack();\n          }, 500);\n        }\n      }, 1000);\n    }\n  };\n\n  const newGame = () => {\n    setWinner(false);\n    setWelcome(true);\n    setInitialLoad(true);\n    gameOn(false);\n    setPlayerBoard(gameBoard(9, 9));\n    setComputerBoard(gameBoard(9, 9));\n  };\n  useEffect(() => {\n    computerAttack();\n  }, [player]);\n\n  useEffect(() => {\n    setUpdateDom(false);\n  }, [updateDom]);\n\n  useEffect(() => {\n    if (intialLoad === false) {\n      playerBoard.placeShip();\n    }\n\n    console.log(\"udpate\");\n  }, [playerBoard]);\n\n  const randomizeShip = () => {\n    if (intialLoad === false) {\n      setPlayerBoard(gameBoard(9, 9));\n      setUpdateDom(true);\n    }\n  };\n\n  return (\n    <div>\n      {welcome ? (\n        <WelcomeScreen playGame={playGame} />\n      ) : winner ? (\n        <WinnerScreen player={player} newGame={newGame} />\n      ) : (\n        <div className=\"container\">\n          <h1 className=\"center-align\">\n            {player ? `Player's Turn!` : `Computer's Turn`}\n              </h1>\n              <p className=\"center-align\" >{action}</p>\n          <div className=\"board-grid\">\n            <PlayerBoard playerBoard={playerBoard.board} winner={winner} />\n            <ComputerBoard\n              computerBoard={computerBoard.board}\n              winner={winner}\n              attack={attack}\n            />\n            {gameOn ? null : <RandomizeShip randomizeShip={randomizeShip} />}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}