{"version":3,"sources":["Components/WelcomeScreen.jsx","Components/PlayerBoard.jsx","Components/ComputerBoard.jsx","Components/ShipFactory.js","Components/GameBoard.js","Components/Winner.jsx","Components/RandomizeShip.jsx","Components/ComputerShips.jsx","App.js","index.js"],"names":["WelcomeScreen","props","className","h1","initial","y","animate","transition","delay","p","x","stiffness","type","button","onClick","playGame","PlayerBoard","playerBoard","map","col","index","row","pos","data-col","data-row","attack","uniqid","ComputerBoard","computerBoard","shipFactory","length","hitPoints","Array","fill","hit","this","indexOf","isSunk","every","val","gameBoard","cols","rows","board","ships","placeShip","horizontal","rndNum","Math","floor","random","forEach","ship","shipPlaced","freeSpaces","i","receiveAttack","splice","WinnerScreen","div","opacity","rotate","duration","player","newGame","RandomizeShip","randomizeShip","ComputerShips","e","App","useState","welcome","setWelcome","setPlayerBoard","setComputerBoard","updateDom","setUpdateDom","setPlayer","winner","setWinner","gameOn","setGameOn","intialLoad","setInitialLoad","action","setAction","computerAttack","setTimeout","useEffect","Winner","target","getAttribute","ReactDOM","render","document","getElementById"],"mappings":"gMAoCeA,EAhCO,SAACC,GACrB,OACE,sBAAKC,UAAU,uBAAf,UACE,cAAC,IAAOC,GAAR,CACEC,QAAS,CAAEC,GAAI,KACfC,QAAS,CAAED,EAAG,GACdE,WAAY,CAAEC,MAAM,IAHtB,qBAOA,eAAC,IAAOC,EAAR,CACEL,QAAS,CAAEM,GAAI,KACfJ,QAAS,CAAEI,EAAG,GACdH,WAAY,CAAEC,MAAO,GAAIG,UAAW,GAAIC,KAAM,UAHhD,oDAKyC,uBALzC,+CAM8C,uBAN9C,6CAO4C,uBAP5C,uCAQsC,uBARtC,yBAWA,cAAC,IAAOC,OAAR,CACET,QAAS,CAAEC,EAAG,KACdC,QAAS,CAAED,EAAG,GACdE,WAAY,CAACC,MAAO,IACdM,QAASb,EAAMc,SAAUb,UAAU,+BAJ3C,uB,gBCuCSc,EA5DK,SAACf,GACnB,OACE,sBAAKC,UAAU,sBAAf,UACE,oBAAIA,UAAU,iBAAd,oBACA,qBAAKA,UAAU,iBAAf,SACGD,EAAMgB,YAAYC,KAAI,SAACC,EAAKC,GAC3B,OACE,qBAAoBlB,UAAU,eAA9B,SACGiB,EAAID,KAAI,SAACG,EAAKC,GACb,MAAsC,QAAlCrB,EAAMgB,YAAYG,GAAOE,GAEzB,qBACEC,WAAUH,EACVI,WAAUF,EACVR,QAASb,EAAMwB,OACfvB,UAAU,YAJFwB,OAU+B,kBAAlCzB,EAAMgB,YAAYG,GAAOE,GAEhC,qBAAyCC,WAAUH,EACjDI,WAAUF,EACVpB,UAAU,oBACVY,QAASb,EAAMwB,QAHPC,OASwB,QAAlCzB,EAAMgB,YAAYG,GAAOE,GAEzB,qBAAyCC,WAAUH,EACjDI,WAAUF,EACVpB,UAAU,oBAFFwB,OASV,qBAAyCH,WAAUH,EACjDI,WAAUF,EACVpB,UAAU,yBAFFwB,WApCRA,gBCwDPC,EA/DO,SAAC1B,GACrB,OACE,sBAAKC,UAAU,sBAAf,UACE,oBAAIA,UAAU,iBAAd,sBACA,qBAAKA,UAAU,iBAAf,SACGD,EAAM2B,cAAcV,KAAI,SAACC,EAAKC,GAC7B,OACE,qBAAoBlB,UAAU,eAA9B,SACGiB,EAAID,KAAI,SAACG,EAAKC,GACb,MAAwC,QAApCrB,EAAM2B,cAAcR,GAAOE,GAE3B,qBACEC,WAAUH,EACVI,WAAUF,EACVR,QAASb,EAAMwB,OACfvB,UAAU,YAJFwB,OAUiC,kBAApCzB,EAAM2B,cAAcR,GAAOE,GAElC,qBACEC,WAAUH,EACVI,WAAUF,EACVpB,UAAU,uBACVY,QAASb,EAAMwB,QAJPC,OAU0B,QAApCzB,EAAM2B,cAAcR,GAAOE,GAE3B,qBACEC,WAAUH,EACVI,WAAUF,EACVpB,UAAU,oBAHFwB,OAQ2B,aAApCzB,EAAM2B,cAAcR,GAAOE,GAE5B,qBACEC,WAAUH,EACVI,WAAUF,EACVpB,UAAU,yBAHFwB,YAFZ,MApCIA,gBCMPG,EAjBK,SAACC,GAEnB,MAAO,CACLC,UAAW,IAAIC,MAAMF,GAAQG,KAAK,KAClCC,IAFK,WAGH,IAAId,EAAQe,KAAKJ,UAAUK,QAAQ,KACpC,OAAOD,KAAKJ,UAAUX,GAAS,KAEhCiB,OANK,WAOH,QAAIF,KAAKJ,UAAUO,OAAM,SAACC,GAAD,MAAiB,MAARA,QC4FzBC,EAnGG,SAACC,EAAMC,GACvB,MAAO,CACLC,MAAO,IAAIX,MAAMU,GAAMT,OAAOf,KAAI,kBAAM,IAAIc,MAAMS,GAAMR,KAAK,UAC7DW,MAAO,CACLf,EAAY,GACZA,EAAY,GACZA,EAAY,GACZA,EAAY,GACZA,EAAY,GACZA,EAAY,IAGdgB,UAXK,WAWQ,IAEP1B,EAAKE,EAFC,OAGNyB,GAAa,EACbC,EAASC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE7Bf,KAAKS,MAAMO,SAAQ,SAACC,EAAMhC,GACxB,IAAIiC,GAAa,EAKjB,IAHIN,EAAS,IACXD,GAAa,IAEPO,GAAY,CAElB,GAAIP,IAEF3B,EAAM6B,KAAKC,MACTD,KAAKE,UAAY,EAAKP,MAAMb,OAASsB,EAAKrB,UAAUD,SAEtDT,EAAM2B,KAAKC,MAAMD,KAAKE,SAAW,EAAKP,MAAMb,QAEf,QAAzB,EAAKa,MAAMxB,GAAKE,IAAgB,CAIlC,IADA,IAAIiC,EAAa,EACRC,EAAI,EAAGA,EAAIH,EAAKrB,UAAUD,OAAQyB,IACR,QAA7B,EAAKZ,MAAMxB,EAAMoC,GAAGlC,IACtBiC,IAGJ,GAAIA,IAAeF,EAAKrB,UAAUD,OAAQ,CACxC,IAAK,IAAIyB,EAAI,EAAGA,EAAIH,EAAKrB,UAAUD,OAAQyB,IACzC,EAAKZ,MAAMxB,EAAMoC,GAAGlC,GAAO+B,EAE7B,OAAqB,GAI3B,IAAKN,IACH3B,EAAM6B,KAAKC,MAAMD,KAAKE,SAAW,EAAKP,MAAMb,QAC5CT,EAAM2B,KAAKC,MACTD,KAAKE,UAAY,EAAKP,MAAMb,OAASsB,EAAKrB,UAAUD,SAEzB,QAAzB,EAAKa,MAAMxB,GAAKE,IAAgB,CAElC,IADA,IAAIiC,EAAa,EACRC,EAAI,EAAGA,EAAIH,EAAKrB,UAAUD,OAAQyB,IACR,QAA7B,EAAKZ,MAAMxB,GAAKE,EAAMkC,IACxBD,IAGJ,GAAIA,IAAeF,EAAKrB,UAAUD,OAAQ,CACxC,IAAK,IAAIyB,EAAI,EAAGA,EAAIH,EAAKrB,UAAUD,OAAQyB,IACzC,EAAKZ,MAAMxB,GAAKE,EAAMkC,GAAKH,EAE7B,OAAqB,IAK7B,OAAOC,MAGXG,cAzEK,SAyESrC,EAAKE,GAOjB,GAN6B,QAAzBc,KAAKQ,MAAMxB,GAAKE,KAClBc,KAAKQ,MAAMxB,GAAKE,GAAO,YAKW,kBAAzBc,KAAKQ,MAAMxB,GAAKE,GAAmB,CAC5C,IAAI+B,EAAOjB,KAAKQ,MAAMxB,GAAKE,GACvBD,EAAQe,KAAKS,MAAMR,QAAQgB,GAO/B,GANAjB,KAAKQ,MAAMxB,GAAKE,GAAO,MACvBc,KAAKS,MAAMxB,GAAOc,MACdC,KAAKS,MAAMxB,GAAOiB,UAEpBF,KAAKS,MAAMa,OAAOrC,EAAO,GAED,IAAtBe,KAAKS,MAAMd,OACb,MAAO,SAGX,OAAOK,KAAKQ,MAAMxB,GAAKE,MC9EdqC,G,MAdM,SAAAzD,GACjB,OACI,eAAC,IAAO0D,IAAR,CACIvD,QAAS,CAAEwD,QAAS,EAAGC,OAAQ,KAC/BvD,QAAS,CAAEsD,QAAS,EAAGC,OAAQ,GAC/BtD,WAAY,CAAEuD,SAAU,EAAGlD,KAAK,SAAUD,UAAW,KACrDT,UAAU,6BAJd,UAKI,qBAAIA,UAAU,eAAd,UAA8BD,EAAM8D,OAAS,eAAiB,iBAA9D,OACA,oDACA,wBAAQ7D,UAAU,+BAA+BY,QAASb,EAAM+D,QAAhE,+BCHGC,EARO,SAAAhE,GAGlB,OACI,wBAAQC,UAAU,oCAAoCY,QAASb,EAAMiE,cAArE,wBCiBOC,EArBO,SAAClE,GACrB,OACE,qBAAKC,UAAU,kBAAf,SACGD,EAAM2C,MAAM1B,KAAI,SAACkD,GAChB,OACE,qBAAKlE,UAAU,YAAf,SACGkE,EAAErC,UAAUb,KAAI,SAACkC,GAChB,MAAa,MAATA,EACK,qBAAMlD,UAAU,gBAEhB,qBAAMA,UAAU,0BCoIxBmE,MApIf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEyBF,mBAAS9B,EAAU,EAAG,IAF/C,mBAENvB,EAFM,KAEOwD,EAFP,OAG6BH,mBAAS9B,EAAU,EAAG,IAHnD,mBAGNZ,EAHM,KAGS8C,EAHT,OAIqBJ,oBAAS,GAJ9B,mBAINK,EAJM,KAIKC,EAJL,OAKeN,oBAAS,GALxB,mBAKNP,EALM,KAKEc,EALF,OAMeP,oBAAS,GANxB,mBAMNQ,EANM,KAMEC,EANF,OAOeT,oBAAS,GAPxB,mBAONU,EAPM,KAOEC,EAPF,OAQwBX,oBAAS,GARjC,mBAQNY,EARM,KAQMC,EARN,OASeb,mBAAS,IATxB,mBASNc,EATM,KASEC,EATF,KAuCPC,EAAiB,SAAjBA,IACJ,IAAKvB,EAAQ,CAIX,IAHA,IAAI5C,EAAM6B,KAAKC,MAAMD,KAAKE,SAAWjC,EAAY0B,MAAMb,QACnDT,EAAM2B,KAAKC,MAAMD,KAAKE,SAAWjC,EAAY0B,MAAMb,SAGpB,aAAhCb,EAAY0B,MAAMxB,GAAKE,IACU,QAAhCJ,EAAY0B,MAAMxB,GAAKE,MACxByD,GAED3D,EAAM6B,KAAKC,MAAMD,KAAKE,SAAWjC,EAAY0B,MAAMb,QACnDT,EAAM2B,KAAKC,MAAMD,KAAKE,SAAWjC,EAAY0B,MAAMb,QAErDb,EAAYuC,cAAcrC,EAAKE,GAC/BkE,YAAW,WACT,GAA4C,aAAxCtE,EAAYuC,cAAcrC,EAAKE,GACjCwD,GAAU,GACVQ,EAAU,sBACL,CAKL,GAJAA,EAAU,kBAEVT,GAAa,GAEoB,IAA7B3D,EAAY2B,MAAMd,OAEpB,YADAiD,GAAU,GAGZQ,YAAW,WACTD,MACC,QAEJ,OAkCP,OArBAE,qBAAU,WACRF,MACC,CAACvB,IAEJyB,qBAAU,WACRZ,GAAa,KACZ,CAACD,IAEJa,qBAAU,YACW,IAAfN,GACFjE,EAAY4B,cAEb,CAAC5B,IAUF,8BACGsD,EACC,cAAC,EAAD,CAAexD,SA/FJ,WACfyD,GAAW,GACXvD,EAAY4B,YACZjB,EAAciB,YACdsC,GAAe,MA4FTL,EACF,cAACW,EAAD,CAAc1B,OAAQA,EAAQC,QAlCpB,WACde,GAAU,GACVP,GAAW,GACXW,GAAe,GACfF,GAAU,GACVR,EAAejC,EAAU,EAAG,IAC5BkC,EAAiBlC,EAAU,EAAG,OA8B1B,sBAAKtC,UAAU,YAAf,UACE,oBAAIA,UAAU,eAAd,SACG6D,EAAM,qCAET,mBAAG7D,UAAU,eAAb,SAA6BkF,IAC7B,sBAAKlF,UAAU,aAAf,UACE,cAAC,EAAD,CAAae,YAAaA,EAAY0B,MAAOmC,OAAQA,IACrD,cAAC,EAAD,CACElD,cAAeA,EAAce,MAC7BmC,OAAQA,EACRrD,OAtGG,SAAC2C,GACd,GAAIL,EAAQ,CACVkB,GAAU,GACV,IAAI9D,EAAMiD,EAAEsB,OAAOC,aAAa,YAC5BtE,EAAM+C,EAAEsB,OAAOC,aAAa,YAChC/D,EAAc4B,cAAcrC,EAAKE,GACa,QAA1CO,EAAc4B,cAAcrC,EAAKE,IAEnCgE,EAAU,eACVT,GAAa,GACsB,IAA/BhD,EAAcgB,MAAMd,QACtBiD,GAAU,KAGZM,EAAU,gBACVR,GAAU,QAyFLG,EAAS,KAAO,cAAC,EAAD,CAAed,cA1BpB,YACD,IAAfgB,IACFT,EAAejC,EAAU,EAAG,IAC5BoC,GAAa,OAwBP,cAAC,EAAD,CAAehC,MAAOhB,EAAcgB,iBCpIhDgD,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2a06cd16.chunk.js","sourcesContent":["import React from \"react\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { motion } from \"framer-motion\";\n\nconst WelcomeScreen = (props) => {\n  return (\n    <div className=\"center-align welcome\">\n      <motion.h1\n        initial={{ y: -300 }}\n        animate={{ y: 0 }}\n        transition={{ delay:.5 }}\n      >\n        Welcome\n      </motion.h1>\n      <motion.p\n        initial={{ x: -800 }}\n        animate={{ x: 0 }}\n        transition={{ delay: .5, stiffness: 70, type: \"spring\" }}\n      >\n        The goal of the game is to destroy all <br/>\n        of the enemy ships before he destroy yours! <br/>\n        if your attack hit, you can attack again. <br/>\n        if you miss, its your oponent turn! <br/>\n        Good Luck, Have Fun\n      </motion.p>\n      <motion.button\n        initial={{ y: 5000 }}\n        animate={{ y: 0 }}\n        transition={{delay: .5}}\n              onClick={props.playGame} className=\"waves-effect waves-light btn\">\n        Play!\n      </motion.button>\n    </div>\n  );\n};\n\nexport default WelcomeScreen;\n","import React from \"react\";\nimport uniqid from \"uniqid\";\n\n\nconst PlayerBoard = (props) => {\n  return (\n    <div className=\"parent center-align\">\n      <h3 className=\"current-player\">Player</h3>\n      <div className=\"grid-container\">\n        {props.playerBoard.map((col, index) => {\n          return (\n            <div key={uniqid()} className=\"center-align\">\n              {col.map((row, pos) => {\n                if (props.playerBoard[index][pos] === \"sea\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      onClick={props.attack}\n                      className=\"squares \"\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (typeof props.playerBoard[index][pos] === \"object\") {\n                  return (\n                    <div key={uniqid()}                      data-col={index}\n                      data-row={pos}\n                      className=\"ship center-align\"\n                      onClick={props.attack}\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (props.playerBoard[index][pos] === \"hit\") {\n                  return (\n                    <div key={uniqid()}                      data-col={index}\n                      data-row={pos}\n                      className=\"hit center-align\"\n                    >\n                      \n                    </div>\n                  );\n                } else {\n                  return (\n                    <div key={uniqid()}                      data-col={index}\n                      data-row={pos}\n                      className=\"attacked center-align\"\n                    >\n                      \n                    </div>\n                  );\n                }\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerBoard;\n","import React from \"react\";\nimport uniqid from \"uniqid\";\n\n\nconst ComputerBoard = (props) => {\n  return (\n    <div className=\"parent center-align\">\n      <h3 className=\"current-player\">Computer</h3>\n      <div className=\"grid-container\">\n        {props.computerBoard.map((col, index) => {\n          return (\n            <div key={uniqid()} className=\"center-align\">\n              {col.map((row, pos) => {\n                if (props.computerBoard[index][pos] === \"sea\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      onClick={props.attack}\n                      className=\"squares \"\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (typeof props.computerBoard[index][pos] === \"object\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      className=\"squares center-align\"\n                      onClick={props.attack}\n                    >\n                      \n                    </div>\n                  );\n                }\n                if (props.computerBoard[index][pos] === \"hit\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      className=\"hit center-align\"\n                    >\n                      \n                    </div>\n                  );\n                } if(props.computerBoard[index][pos] === \"attacked\") {\n                  return (\n                    <div key={uniqid()}\n                      data-col={index}\n                      data-row={pos}\n                      className=\"attacked center-align\"\n                    >\n                      \n                    </div>\n                  );\n                }\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ComputerBoard;\n","const shipFactory = (length) => {\n  \n  return {\n    hitPoints: new Array(length).fill(\"o\"),\n    hit() {\n      let index = this.hitPoints.indexOf(\"o\");\n     return this.hitPoints[index] = \"x\";\n    },\n    isSunk() {\n      if (this.hitPoints.every((val) => val === \"x\")) {\n        return true;\n      } else return false;\n    },\n  };\n};\n\n\nexport default shipFactory;","import shipFactory from \"./ShipFactory\";\n\nconst gameBoard = (cols, rows) => {\n  return {\n    board: new Array(rows).fill().map(() => new Array(cols).fill(\"sea\")),\n    ships: [\n      shipFactory(2),\n      shipFactory(2),\n      shipFactory(3),\n      shipFactory(3),\n      shipFactory(4),\n      shipFactory(5),\n    ],\n    //----------------------------PLACESHIP\n    placeShip() {\n      //variables\n      let col, row;\n      let horizontal = true;\n      let rndNum = Math.floor(Math.random() * 10);\n\n      this.ships.forEach((ship, index) => {\n        let shipPlaced = false;\n\n        if (rndNum > 5) {\n          horizontal = false;\n        }\n        while (!shipPlaced) {\n          //--------------------------- HORIZONTAL--//\n          if (horizontal) {\n            //check for roll to not place the ship out of boundaries\n            col = Math.floor(\n              Math.random() * (this.board.length - ship.hitPoints.length)\n            );\n            row = Math.floor(Math.random() * this.board.length);\n            //check if space rolled is empty\n            if (this.board[col][row] === \"sea\") {\n              //create a freeSpaces var to check if there is enough spaces for the length\n              //of the ship\n              let freeSpaces = 1;\n              for (let i = 1; i < ship.hitPoints.length; i++) {\n                if (this.board[col + i][row] === \"sea\") {\n                  freeSpaces++;\n                } \n              }\n              if (freeSpaces === ship.hitPoints.length) {\n                for (let i = 0; i < ship.hitPoints.length; i++) {\n                  this.board[col + i][row] = ship;\n                }\n                return (shipPlaced = true);\n              }\n            } //-----------------------------VERTICAL--//\n          }\n          if (!horizontal) {\n            col = Math.floor(Math.random() * this.board.length);\n            row = Math.floor(\n              Math.random() * (this.board.length - ship.hitPoints.length)\n            );\n            if (this.board[col][row] === \"sea\") {\n              let freeSpaces = 1;\n              for (let i = 1; i < ship.hitPoints.length; i++) {\n                if (this.board[col][row + i] === \"sea\") {\n                  freeSpaces++;\n                } \n              }\n              if (freeSpaces === ship.hitPoints.length) {\n                for (let i = 0; i < ship.hitPoints.length; i++) {\n                  this.board[col][row + i] = ship;\n                }\n                return (shipPlaced = true);\n              }\n            }\n          } \n        }\n        return shipPlaced;\n      });\n    },\n    receiveAttack(col, row) {\n      if (this.board[col][row] === \"sea\") {\n        this.board[col][row] = \"attacked\";\n        //next player\n        //remove eventListener\n      }\n      //TODO HERE\n      if (typeof this.board[col][row] === \"object\") {\n        let ship = this.board[col][row];\n        let index = this.ships.indexOf(ship);\n        this.board[col][row] = \"hit\";\n        this.ships[index].hit();\n        if (this.ships[index].isSunk()) {\n          //check for all ships destroyed\n          this.ships.splice(index, 1);\n        }\n        if (this.ships.length === 0) {\n          return \"winner\";\n        }\n      }\n      return this.board[col][row];\n    },\n  };\n};\n\nexport default gameBoard;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\n\n\nconst WinnerScreen = props => {\n    return (\n        <motion.div\n            initial={{ opacity: 0, rotate: 180 }}\n            animate={{ opacity: 1, rotate: 0 }}\n            transition={{ duration: 2, type:\"spring\", stiffness: 200}}\n            className=\"center-align win-container\">\n            <h1 className=\"center-align\">{props.player ? \"Player Wins!\" : \"Computer Wins!\"} </h1>\n            <p>Thanks for playing!</p>\n            <button className=\"waves-effect waves-ligth btn\" onClick={props.newGame}>Play Again ?</button>\n        </motion.div>\n    )\n}\n\nexport default WinnerScreen;","import React from \"react\";\n\nconst RandomizeShip = props => {\n\n\n    return (\n        <button className=\"random btn waves-effect waves-red\" onClick={props.randomizeShip}>Randomize</button>\n    )\n}\n\nexport default RandomizeShip;","import React from \"react\";\n\nconst ComputerShips = (props) => {\n  return (\n    <div className=\"remaining-ships\">\n      {props.ships.map((e) => {\n        return (\n          <div className=\"ship-left\">\n            {e.hitPoints.map((ship) => {\n              if (ship === \"o\" ){\n                return <div  className=\"square-left\"></div>;\n              } else {\n                return <div  className=\"square-hit\"></div>;\n\n              }\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ComputerShips;\n","import WelcomeScreen from \"./Components/WelcomeScreen\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport PlayerBoard from \"./Components/PlayerBoard\";\nimport ComputerBoard from \"./Components/ComputerBoard\";\nimport gameBoard from \"./Components/GameBoard\";\nimport \"./style/style.css\";\nimport WinnerScreen from \"./Components/Winner\";\nimport RandomizeShip from \"./Components/RandomizeShip\";\nimport ComputerShips from \"./Components/ComputerShips\";\nimport { motion } from \"framer-motion\"\n\nfunction App() {\n  const [welcome, setWelcome] = useState(true);\n  const [playerBoard, setPlayerBoard] = useState(gameBoard(9, 9));\n  const [computerBoard, setComputerBoard] = useState(gameBoard(9, 9));\n  const [updateDom, setUpdateDom] = useState(false);\n  const [player, setPlayer] = useState(true);\n  const [winner, setWinner] = useState(false);\n  const [gameOn, setGameOn] = useState(false);\n  const [intialLoad, setInitialLoad] = useState(true);\n  const [action, setAction] = useState(\"\");\n\n  // Start the game and set initialload false to prevent bugs\n  const playGame = () => {\n    setWelcome(false);\n    playerBoard.placeShip();\n    computerBoard.placeShip();\n    setInitialLoad(false);\n  };\n  //attack the computer board\n  const attack = (e) => {\n    if (player) {\n      setGameOn(true);\n      let col = e.target.getAttribute(\"data-col\");\n      let row = e.target.getAttribute(\"data-row\");\n      computerBoard.receiveAttack(col, row);\n      if (computerBoard.receiveAttack(col, row) === \"hit\") {\n        //keeps playing\n        setAction(\"Player Hit!\");\n        setUpdateDom(true);\n        if (computerBoard.ships.length === 0) {\n          setWinner(true);\n        }\n      } else {\n        setAction(\"Player Miss!\");\n        setPlayer(false);\n      }\n    }\n  };\n  //randomize the computer attack on the player board\n  const computerAttack = () => {\n    if (!player) {\n      let col = Math.floor(Math.random() * playerBoard.board.length);\n      let row = Math.floor(Math.random() * playerBoard.board.length);\n\n      while (\n        (playerBoard.board[col][row] === \"attacked\" ||\n          playerBoard.board[col][row] === \"hit\") &&\n        !winner\n      ) {\n        col = Math.floor(Math.random() * playerBoard.board.length);\n        row = Math.floor(Math.random() * playerBoard.board.length);\n      }\n      playerBoard.receiveAttack(col, row);\n      setTimeout(() => {\n        if (playerBoard.receiveAttack(col, row) === \"attacked\") {\n          setPlayer(true);\n          setAction(\"Computer Miss!\");\n        } else {\n          setAction(\"Computer Hits!\");\n\n          setUpdateDom(true);\n\n          if (playerBoard.ships.length === 0) {\n            setWinner(true);\n            return;\n          }\n          setTimeout(() => {\n            computerAttack();\n          }, 500);\n        }\n      }, 1000);\n    }\n  };\n  //set everythign to default to begin a new game\n  //and reset the board to prevent bugs\n  const newGame = () => {\n    setWinner(false);\n    setWelcome(true);\n    setInitialLoad(true);\n    setGameOn(false);\n    setPlayerBoard(gameBoard(9, 9));\n    setComputerBoard(gameBoard(9, 9));\n  };\n  useEffect(() => {\n    computerAttack();\n  }, [player]);\n\n  useEffect(() => {\n    setUpdateDom(false);\n  }, [updateDom]);\n\n  useEffect(() => {\n    if (intialLoad === false) {\n      playerBoard.placeShip();\n    }\n  }, [playerBoard]);\n\n  const randomizeShip = () => {\n    if (intialLoad === false) {\n      setPlayerBoard(gameBoard(9, 9));\n      setUpdateDom(true);\n    }\n  };\n\n  return (\n    <div>\n      {welcome ? (\n        <WelcomeScreen playGame={playGame} />\n      ) : winner ? (\n        <WinnerScreen player={player} newGame={newGame} />\n      ) : (\n        <div className=\"container\">\n          <h1 className=\"center-align\">\n            {player ? `Player's Turn!` : `Computer's Turn`}\n          </h1>\n          <p className=\"center-align\">{action}</p>\n          <div className=\"board-grid\">\n            <PlayerBoard playerBoard={playerBoard.board} winner={winner} />\n            <ComputerBoard\n              computerBoard={computerBoard.board}\n              winner={winner}\n              attack={attack}\n            />\n            {gameOn ? null : <RandomizeShip randomizeShip={randomizeShip} />}\n            <ComputerShips ships={computerBoard.ships} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}