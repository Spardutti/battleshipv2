{"version":3,"sources":["Components/WelcomeScreen.jsx","Components/PlayerBoard.jsx","Components/ComputerBoard.jsx","Components/ShipFactory.js","Components/GameBoard.js","App.js","index.js"],"names":["WelcomeScreen","props","className","onClick","playGame","PlayerBoard","playerBoard","map","col","index","row","pos","data-col","data-row","attack","ComputerBoard","computerBoard","shipFactory","length","hitPoints","Array","fill","hit","this","indexOf","isSunk","every","val","gameBoard","cols","rows","board","ships","placeShip","shipPlaced","horizontal","rndNum","Math","floor","random","forEach","ship","freeSpaces","i","receiveAttack","splice","App","useState","welcome","setWelcome","updateDom","setUpdateDom","player","setPlayer","winner","setWinner","useEffect","setTimeout","computerAttack","e","target","getAttribute","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd154fde.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Card, Row, Col} from \"react-materialize\"\nimport \"materialize-css/dist/css/materialize.min.css\"\n\nconst WelcomeScreen = props => {\n\n    return (\n        <div className=\"center-align welcome\">\n            <h1 >Welcome</h1>\n            <p>The goal of the game is to destroy all</p>\n            <p>of the enemy ships before he destroy yours!</p>\n            <p>if your attack hit, you can attack again.</p>\n            <p>if you miss, its your oponent turn!</p>\n            <p>Good Luck, Have Fun!</p>\n            <button onClick={props.playGame} className=\"waves-effect waves-light btn\">Play!</button>\n        </div>\n\n    )\n}\n\nexport default WelcomeScreen;","import React from \"react\";\nconst PlayerBoard = (props) => {\n  return (\n    <div className=\"parent center-align\">\n      <h3>Computer</h3>\n      <div className=\"grid-container\">\n        {props.playerBoard.map((col, index) => {\n          return (\n            <div className=\"center-align\">\n              {col.map((row, pos) => {\n                if (props.playerBoard[index][pos] === \"sea\") {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      onClick={props.attack}\n                      className=\"squares \"\n                    >\n                      Sea\n                    </div>\n                  );\n                }\n                if (typeof props.playerBoard[index][pos] === \"object\") {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      className=\"ship center-align\"\n                      onClick={props.attack}\n                    >\n                      Ship\n                    </div>\n                  );\n                }\n                if (props.playerBoard[index][pos] === \"hit\") {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      className=\"hit center-align\"\n                    >\n                      hit\n                    </div>\n                  );\n                } else {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      className=\"attacked center-align\"\n                    >\n                      Att\n                    </div>\n                  );\n                }\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerBoard;\n","import React from \"react\";\nconst ComputerBoard = (props) => {\n  return (\n    <div className=\"parent center-align\">\n      <h3>Computer</h3>\n      <div className=\"grid-container\">\n        {props.computerBoard.map((col, index) => {\n          return (\n            <div className=\"center-align\">\n              {col.map((row, pos) => {\n                if (props.computerBoard[index][pos] === \"sea\") {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      onClick={props.attack}\n                      className=\"squares \"\n                    >\n                      Sea\n                    </div>\n                  );\n                }\n                if (typeof props.computerBoard[index][pos] === \"object\") {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      className=\"ship center-align\"\n                      onClick={props.attack}\n                    >\n                      Ship\n                    </div>\n                  );\n                }\n                if (props.computerBoard[index][pos] === \"hit\") {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      className=\"hit center-align\"\n                    >\n                      hit\n                    </div>\n                  );\n                } else {\n                  return (\n                    <div\n                      data-col={index}\n                      data-row={pos}\n                      className=\"attacked center-align\"\n                    >\n                      Att\n                    </div>\n                  );\n                }\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ComputerBoard;\n","const shipFactory = (length) => {\n  return {\n    hitPoints: new Array(length).fill(\"o\"),\n    hit() {\n      let index = this.hitPoints.indexOf(\"o\");\n     return this.hitPoints[index] = \"x\";\n    },\n    isSunk() {\n      if (this.hitPoints.every((val) => val === \"x\")) {\n        return true;\n      } else return false;\n    },\n  };\n};\n\n\nexport default shipFactory;","import shipFactory from \"./ShipFactory\";\n\nconst gameBoard = (cols, rows) => {\n  return {\n    board: new Array(rows).fill().map(() => new Array(cols).fill(\"sea\")),\n    ships: [shipFactory(3)],\n    //----------------------------PLACESHIP\n    placeShip() {\n      //variables\n      let col, row;\n      let shipPlaced = false;\n      let horizontal = true;\n      let rndNum = Math.floor(Math.random() * 10);\n\n      this.ships.forEach((ship, index) => {\n        if (rndNum > 5) {\n          horizontal = false;\n        }\n        while (!shipPlaced) {\n          //--------------------------- HORIZONTAL--//\n          if (horizontal) {\n            //check for roll to not place the ship out of boundaries\n            col = Math.floor(\n              Math.random() * (this.board.length - ship.hitPoints.length)\n            );\n            row = Math.floor(Math.random() * this.board.length);\n            //check if space rolled is empty\n            if (this.board[col][row] === \"sea\") {\n              //create a freeSpaces var to check if there is enough spaces for the length\n              //of the ship\n              let freeSpaces = 1;\n              for (let i = 1; i < ship.hitPoints.length; i++) {\n                if (this.board[col + i][row] === \"sea\") {\n                  freeSpaces++;\n                } else return (shipPlaced = false);\n              }\n              if (freeSpaces === ship.hitPoints.length) {\n                for (let i = 0; i < ship.hitPoints.length; i++) {\n                  this.board[col + i][row] = ship;\n                }\n                return (shipPlaced = true);\n              }\n            } //-----------------------------VERTICAL--//\n          }\n          if (!horizontal) {\n            col = Math.floor(Math.random() * this.board.length);\n            row = Math.floor(\n              Math.random() * (this.board.length - ship.hitPoints.length)\n            );\n            if (this.board[col][row] === \"sea\") {\n              let freeSpaces = 1;\n              for (let i = 1; i < ship.hitPoints.length; i++) {\n                if (this.board[col][row + i] === \"sea\") {\n                  freeSpaces++;\n                } else return (shipPlaced = false);\n              }\n              if (freeSpaces === ship.hitPoints.length) {\n                for (let i = 0; i < ship.hitPoints.length; i++) {\n                  this.board[col][row + i] = ship;\n                }\n                return (shipPlaced = true);\n              }\n            }\n          } else return (shipPlaced = false);\n        }\n      });\n      return shipPlaced;\n    },\n    receiveAttack(col, row) {\n      if (this.board[col][row] === \"sea\") {\n        this.board[col][row] = \"attacked\";\n        //next player\n        //remove eventListener\n      }\n      //TODO HERE\n      if ( typeof this.board[col][row] === \"object\") {\n        let ship = this.board[col][row];\n        let index = this.ships.indexOf(ship);\n        this.board[col][row] = \"hit\"\n        this.ships[index].hit();\n        if (this.ships[index].isSunk()) {\n          //check for all ships destroyed\n          this.ships.splice(index, 1);\n        }\n        if (this.ships.length === 0) {\n          \n          return \"winner\";\n        }\n      }\n      return this.board[col][row];\n    },\n  };\n};\n\nexport default gameBoard;\n","import WelcomeScreen from \"./Components/WelcomeScreen\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport PlayerBoard from \"./Components/PlayerBoard\";\nimport ComputerBoard from \"./Components/ComputerBoard\";\nimport gameBoard from \"./Components/GameBoard\";\nimport \"./style/style.css\";\n\nfunction App() {\n  const [welcome, setWelcome] = useState(true);\n  const [playerBoard, setPlayerBoard] = useState(gameBoard(9, 9));\n  const [computerBoard, setComputerBoard] = useState(gameBoard(9, 9));\n  const [updateDom, setUpdateDom] = useState(false);\n  const [player, setPlayer] = useState(true);\n  const [ winner, setWinner ] = useState(false);\n\n  //FIGURE HOW TO DISABLE CLICK ON DIV AFTER IT HAVE BEEN CLICKED;\n\n  const playGame = () => {\n    setWelcome(false);\n    playerBoard.placeShip();\n    computerBoard.placeShip();\n  };\n\n  const attack = (e) => {\n    if (player) {\n      let col = e.target.getAttribute(\"data-col\");\n      let row = e.target.getAttribute(\"data-row\");\n      computerBoard.receiveAttack(col, row);\n      if (computerBoard.receiveAttack(col, row) === \"hit\") {\n        //keeps playing\n        setUpdateDom(true);\n        if (computerBoard.ships.length === 0) {\n          setWinner(true);\n        }\n      } else {\n        setPlayer(false);\n      }\n    }\n  };\n  const computerAttack = () => {\n    if (!player) {\n      let col = Math.floor(Math.random() * playerBoard.board.length);\n      let row = Math.floor(Math.random() * playerBoard.board.length);\n      setTimeout(() => {\n        playerBoard.receiveAttack(col, row);\n        if (playerBoard.receiveAttack(col, row) === \"hit\") {\n          setUpdateDom(true);\n          if (playerBoard.ships.length === 0) {\n            setWinner(true);\n          }\n        } else {\n          setPlayer(true);\n        }\n      }, 500);\n    }\n  };\n  useEffect(() => {\n    computerAttack();\n  }, [player]);\n\n  useEffect(() => {\n    setUpdateDom(false);\n  }, [updateDom]);\n\n  return (\n    <div>\n      {welcome ? (\n        <WelcomeScreen playGame={playGame} />\n      ) : winner ? <h1>Win</h1> : (\n        <div className=\"container\">\n          <h1 className=\"center-align\">\n            {player ? `Player's Turn!` : `Computer's Turn`}\n          </h1>\n          <div className=\"board-grid\">\n            <PlayerBoard playerBoard={playerBoard.board} winner={winner} />\n            <ComputerBoard\n              computerBoard={computerBoard.board} winner={winner}\n              attack={attack}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}